"use client"

import { useState, useEffect } from "react"
import { Info, BarChart3, TrendingUp } from "lucide-react"
import { fetchFlights } from "@/lib/api"
import { calculateDelayMinutes } from "@/lib/timezone-utils"

interface AircraftData {
  type: string
  avgDelay: number | null
  flights: number | null
  arrivals: number | null
  departures: number | null
  category: "Narrow-body" | "Wide-body" | "Regional"
  manufacturer: string
  capacity: string
  routes: string
  allRoutes: string[]
  hasMoreRoutes: boolean
  totalRoutes: number
}

export function AircraftPerformanceChart() {
  const [selectedAircraft, setSelectedAircraft] = useState<string | null>(null)
  const [viewType, setViewType] = useState<"delay" | "flights">("delay")
  const [isLoading, setIsLoading] = useState(true)
  const [aircraftData, setAircraftData] = useState<AircraftData[]>([])
  const [showAllRoutes, setShowAllRoutes] = useState<string | null>(null)

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true)
      try {
        const flightsResponse = await fetchFlights({
          flightDirection: "D",
          scheduleDate: new Date().toISOString().split('T')[0],
          isOperationalFlight: true,
          prefixicao: "KL"
        })
        
        const flights = flightsResponse.flights
        
        if (!flights || flights.length === 0) {
          const initialAircraftData: AircraftData[] = [
            {
              type: "No flights",
              avgDelay: null,
              flights: 0,
              arrivals: 0,
              departures: 0,
              category: "Narrow-body",
              manufacturer: "No data",
              capacity: "No flights today",
              routes: "No flights scheduled",
              allRoutes: [],
              hasMoreRoutes: false,
              totalRoutes: 0
            }
          ]
          setAircraftData(initialAircraftData)
          return
        }
        
        const aircraftCounts = flights.reduce((acc, flight) => {
          const type = flight.aircraftType.iataSub
          const safeType = typeof type === 'string' ? type : 'Unknown'
          acc[safeType] = (acc[safeType] || 0) + 1
          return acc
        }, {} as Record<string, number>)
        
        const aircraftPerformance = Object.entries(aircraftCounts).map(([type, count]) => {
          const typeFlights = flights.filter(f => {
            const flightType = f.aircraftType.iataSub
            const safeFlightType = typeof flightType === 'string' ? flightType : 'Unknown'
            return safeFlightType === type
          })
          const typeDelays = typeFlights.map(flight => 
            calculateDelayMinutes(flight.scheduleDateTime, flight.publicEstimatedOffBlockTime)
          )
          const avgDelay = typeDelays.length > 0 ? typeDelays.reduce((a, b) => a + b, 0) / typeDelays.length : 0
          
          const allRoutes = [...new Set(typeFlights.map(f => f.route.destinations.join(', ')))]
          const displayRoutes = allRoutes.slice(0, 3).join('; ')
          const hasMoreRoutes = allRoutes.length > 3
          
          const category = getAircraftCategory(type)
          const manufacturer = getAircraftManufacturer(type)
          const capacity = getAircraftCapacity(type)
          
          return {
            type,
            avgDelay,
            flights: count,
            arrivals: 0,
            departures: count,
            category,
            manufacturer,
            capacity,
            routes: displayRoutes,
            allRoutes: allRoutes,
            hasMoreRoutes,
            totalRoutes: allRoutes.length
          }
        }).sort((a, b) => (a.avgDelay || 0) - (b.avgDelay || 0))
        
        setAircraftData(aircraftPerformance)
      } catch (error) {
        console.error("Error fetching aircraft performance data:", error)
        const errorData: AircraftData[] = [
          {
            type: "Error loading data",
            avgDelay: null,
            flights: null,
            arrivals: null,
            departures: null,
            category: "Narrow-body",
            manufacturer: "Error",
            capacity: "Error loading data",
            routes: "Please try again",
            allRoutes: [],
            hasMoreRoutes: false,
            totalRoutes: 0
          }
        ]
        setAircraftData(errorData)
      } finally {
        setIsLoading(false)
      }
    }

    fetchData()
  }, [])

  const getAircraftCategory = (type: string): "Narrow-body" | "Wide-body" | "Regional" => {
    if (type === 'Unknown') return "Regional"
    if (type.includes('737') || type.includes('A320') || type.includes('A321')) return "Narrow-body"
    if (type.includes('777') || type.includes('787') || type.includes('A330') || type.includes('A350')) return "Wide-body"
    return "Regional"
  }

  const getAircraftManufacturer = (type: string): string => {
    if (type === 'Unknown') return "Unknown"
    if (type.includes('737') || type.includes('777') || type.includes('787')) return "Boeing"
    if (type.includes('A320') || type.includes('A321') || type.includes('A330') || type.includes('A350')) return "Airbus"
    return "Unknown"
  }

  const getAircraftCapacity = (type: string): string => {
    if (type === 'Unknown') return 'Unknown capacity'
    const capacityMap: Record<string, string> = {
      'B737-700': '149 seats',
      'B737-800': '186 seats',
      'B737-900': '189 seats',
      'B777-200ER': '318 seats',
      'B777-300ER': '408 seats',
      'B787-9': '294 seats',
      'B787-10': '344 seats',
      'A320': '180 seats',
      'A321': '220 seats',
      'A330-200': '243 seats',
      'A330-300': '292 seats',
    }
    return capacityMap[type] || 'Unknown capacity'
  }

  const maxDelay = Math.max(...aircraftData.map((d) => d.avgDelay || 0))
  const maxFlights = Math.max(...aircraftData.map((d) => d.flights || 0))

  const getBarHeight = (value: number | null, max: number) => {
    if (!value || max === 0) return 8
    return Math.max((value / max) * 200, 8)
  }

  const getDelayColor = (delay: number | null, category: string) => {
    if (!delay) return "bg-gray-300 hover:bg-gray-400"
    if (delay > 15) return "bg-red-500 hover:bg-red-600"
    if (delay > 10) return "bg-orange-500 hover:bg-orange-600"
    if (delay > 5) return "bg-yellow-500 hover:bg-yellow-600"
    return "bg-green-500 hover:bg-green-600"
  }

  const getFlightColor = (flights: number | null) => {
    if (!flights) return "bg-gray-300 hover:bg-gray-400"
    if (flights > 25) return "bg-blue-600 hover:bg-blue-700"
    if (flights > 15) return "bg-blue-500 hover:bg-blue-600"
    if (flights > 10) return "bg-blue-400 hover:bg-blue-500"
    return "bg-blue-300 hover:bg-blue-400"
  }

  const getCategoryColor = (category: string) => {
    switch (category) {
      case "Regional":
        return "text-green-600 bg-green-50"
      case "Narrow-body":
        return "text-blue-600 bg-blue-50"
      case "Wide-body":
        return "text-purple-600 bg-purple-50"
      default:
        return "text-gray-600 bg-gray-50"
    }
  }

  const formatValue = (value: number | null) => {
    return value !== null ? value.toString() : "n/v"
  }

  const formatDelay = (delay: number | null) => {
    return delay !== null ? `${delay.toFixed(1)}m` : "n/v"
  }

  if (isLoading) {
    return (
      <div className="bg-white rounded-lg border border-gray-200 p-4 sm:p-6 animate-pulse">
        <div className="h-6 bg-gray-200 rounded mb-4"></div>
        <div className="h-4 bg-gray-200 rounded mb-6"></div>
        <div className="flex items-end justify-center gap-4 h-80">
          {[...Array(10)].map((_, index) => (
            <div key={index} className="w-12 bg-gray-200 rounded-t" style={{ height: `${Math.random() * 200 + 8}px` }}></div>
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-lg border border-gray-200 p-4 sm:p-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6">
        <div>
          <h2 className="text-lg font-semibold text-gray-900 mb-1">Aircraft Type Performance</h2>
          <p className="text-sm text-gray-600">Click bars for detailed breakdown</p>
        </div>
        <div className="flex items-center gap-2 mt-4 sm:mt-0">
          <button
            onClick={() => setViewType("delay")}
            className={`flex items-center gap-2 px-3 py-2 rounded-md text-sm font-medium cursor-pointer transition-colors ${
              viewType === "delay" ? "bg-blue-100 text-blue-700" : "text-gray-600 hover:text-gray-900 hover:bg-gray-50"
            }`}
          >
            <BarChart3 className="h-4 w-4" />
            Delays
          </button>
          <button
            onClick={() => setViewType("flights")}
            className={`flex items-center gap-2 px-3 py-2 rounded-md text-sm font-medium cursor-pointer transition-colors ${
              viewType === "flights"
                ? "bg-blue-100 text-blue-700"
                : "text-gray-600 hover:text-gray-900 hover:bg-gray-50"
            }`}
          >
            <TrendingUp className="h-4 w-4" />
            Volume
          </button>
        </div>
      </div>

      <div className="relative">
        <div className="relative overflow-x-auto">
          <div className="flex items-end justify-center min-w-[800px] sm:min-w-0 gap-2 sm:gap-3 md:gap-4 lg:gap-6 h-80 mb-6 px-2">
            {aircraftData.map((data, index) => {
              const isSelected = selectedAircraft === data.type
              const value = viewType === "delay" ? data.avgDelay : data.flights
              const maxValue = viewType === "delay" ? maxDelay : maxFlights
              const height = getBarHeight(value, maxValue)
              const colorClass =
                viewType === "delay" ? getDelayColor(data.avgDelay, data.category) : getFlightColor(data.flights)

              return (
                <div key={index} className="flex flex-col items-center group cursor-pointer">
                  <div className="text-center mb-2">
                    <span className="text-xs sm:text-sm font-medium text-gray-900">
                      {viewType === "delay" 
                        ? formatDelay(data.avgDelay)
                        : formatValue(data.flights)
                      }
                    </span>
                  </div>
                  <div
                    className={`w-8 sm:w-10 md:w-12 lg:w-14 rounded-t transition-all duration-200 ${colorClass} ${
                      isSelected ? "ring-2 ring-blue-500 ring-offset-2" : ""
                    }`}
                    style={{ height: `${height}px` }}
                    onClick={() => setSelectedAircraft(isSelected ? null : data.type)}
                    title={`${data.type}: ${viewType === "delay" 
                      ? formatDelay(data.avgDelay)
                      : `${formatValue(data.flights)} flights`
                    } | Routes: ${data.routes || 'No route data'}`}
                  />
                  <div className="mt-3 text-center">
                    <span className="text-xs sm:text-sm font-medium text-gray-900 block">
                      {data.type}
                    </span>
                    <span
                      className={`inline-block px-1.5 sm:px-2 py-1 rounded-full text-xs font-medium mt-1 ${getCategoryColor(data.category)}`}
                    >
                      {data.category}
                    </span>
                  </div>
                </div>
              )
            })}
          </div>
        </div>
        <div className="absolute left-2 top-0 h-64 flex flex-col justify-between text-xs text-gray-500"></div>
      </div>

      {selectedAircraft && (
        <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
          <div className="flex items-start gap-3">
            <Info className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" />
            <div>
              <h3 className="font-medium text-blue-900 mb-2">{selectedAircraft} Details</h3>
              {(() => {
                const data = aircraftData.find((d) => d.type === selectedAircraft)
                if (!data) return null
                return (
                  <div className="grid grid-cols-1 sm:grid-cols-4 gap-4 text-sm">
                    <div>
                      <span className="text-blue-700 font-medium">Average Delay:</span>
                      <p className="text-blue-900">{formatDelay(data.avgDelay)}</p>
                    </div>
                    <div>
                      <span className="text-blue-700 font-medium">Total Flights:</span>
                      <p className="text-blue-900">{formatValue(data.flights)}</p>
                    </div>
                    <div>
                      <span className="text-blue-700 font-medium">Arrivals/Departures:</span>
                      <p className="text-blue-900">{formatValue(data.arrivals)}/{formatValue(data.departures)}</p>
                    </div>
                    <div>
                      <span className="text-blue-700 font-medium">Manufacturer:</span>
                      <p className="text-blue-900">{data.manufacturer}</p>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm mt-4">
                    <div>
                      <span className="text-blue-700 font-medium">Category:</span>
                      <p className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(data.category)}`}>
                        {data.category}
                      </p>
                    </div>
                    <div>
                      <span className="text-blue-700 font-medium">Capacity:</span>
                      <p className="text-blue-900">{data.capacity}</p>
                    </div>
                    <div>
                      <span className="text-blue-700 font-medium">Routes ({data.totalRoutes}):</span>
                      <div className="text-blue-900">
                        {showAllRoutes === data.type ? (
                          <div>
                            <div className="text-xs text-gray-600 mb-1">All routes:</div>
                            <div className="text-xs space-y-1">
                              {data.allRoutes.map((route, index) => (
                                <div key={index} className="bg-gray-50 px-2 py-1 rounded">
                                  {route}
                                </div>
                              ))}
                            </div>
                            <button
                              onClick={() => setShowAllRoutes(null)}
                              className="text-xs text-blue-600 hover:text-blue-800 mt-2 cursor-pointer"
                            >
                              Show less
                            </button>
                          </div>
                        ) : (
                          <div>
                            <div className="text-xs">{data.routes}</div>
                            {data.hasMoreRoutes && (
                              <button
                                onClick={() => setShowAllRoutes(data.type)}
                                className="text-xs text-blue-600 hover:text-blue-800 mt-1 cursor-pointer"
                              >
                                View all {data.totalRoutes} routes
                              </button>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )
              })()}
            </div>
          </div>
        </div>
      )}

      <div className="mt-4 flex flex-wrap gap-4 text-xs">
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-green-500 rounded"></div>
          <span className="text-gray-600">Low Delay (&lt;5 min)</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-yellow-500 rounded"></div>
          <span className="text-gray-600">Medium Delay (5-10 min)</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-orange-500 rounded"></div>
          <span className="text-gray-600">High Delay (10-15 min)</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-red-500 rounded"></div>
          <span className="text-gray-600">Critical Delay (&gt;15 min)</span>
        </div>
      </div>
    </div>
  )
}
